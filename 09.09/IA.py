# -*- coding: utf-8 -*-
"""IA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYxI5PL4C1TazV9qvboBpc7kMO0VdTxt
"""

import pandas as pd


dados = {
    "customerID": ["001", "002", "003", "004", "005", "006"],
    "gender": ["Male", "Female", "Male", "Female", "Male", "Female"],
    "SeniorCitizen": [0, 1, 0, 0, 1, 0],
    "Partner": ["Yes", "No", "Yes", "No", "Yes", "No"],
    "Dependents": ["No", "No", "Yes", "No", "No", "Yes"],
    "tenure": [12, 24, 5, 36, 2, 48],
    "PhoneService": ["Yes", "Yes", "Yes", "Yes", "No", "Yes"],
    "InternetService": ["Fiber optic", "DSL", "Fiber optic", "DSL", "DSL", "Fiber optic"],
    "Contract": ["Month-to-month", "Two year", "Month-to-month", "One year", "Month-to-month", "Two year"],
    "MonthlyCharges": [70.35, 55.15, 89.10, 45.20, 29.85, 99.65],
    "TotalCharges": [845.5, 1323.6, 445.5, 1627.2, 59.7, 4783.2],
    "Churn": ["Yes", "No", "Yes", "No", "Yes", "No"]
}

df = pd.DataFrame(dados)
df.to_csv("churn_data.csv", index=False)
print("‚úÖ Arquivo churn_data.csv criado!")

"""
Script: churn_analysis.py
Descri√ß√£o: Este script carrega o dataset 'churn_data.csv' e realiza an√°lises iniciais
sobre a taxa de cancelamento (churn).
Instru√ß√µes:
- Certifique-se de que o arquivo 'churn_data.csv' esteja no mesmo diret√≥rio do script.
- Execute o programa com: python churn_analysis.py
"""

import pandas as pd


def carregar_dataset(caminho: str) -> pd.DataFrame:
    """
    Carrega um dataset CSV usando pandas.

    Par√¢metros:
        caminho (str): Caminho do arquivo CSV.

    Retorno:
        pd.DataFrame: DataFrame com os dados carregados.
    """
    try:
        df = pd.read_csv(caminho)
        print(f"‚úÖ Dataset carregado com sucesso! Linhas: {df.shape[0]}, Colunas: {df.shape[1]}")
        return df
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo '{caminho}' n√£o encontrado.")
    except pd.errors.EmptyDataError:
        print("‚ùå Erro: O arquivo est√° vazio.")
    except pd.errors.ParserError:
        print("‚ùå Erro: O arquivo est√° corrompido ou mal formatado.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")


def visualizar_primeiras_linhas(df: pd.DataFrame, n: int = 5):
    """
    Exibe as primeiras linhas do dataset.
    """
    if df is not None:
        print("\nüìä Primeiras linhas do dataset:")
        print(df.head(n))
    else:
        print("‚ö†Ô∏è Nenhum dado dispon√≠vel para exibi√ß√£o.")


def calcular_taxa_churn(df: pd.DataFrame):
    """
    Calcula a porcentagem de clientes que cancelaram e n√£o cancelaram.

    Par√¢metros:
        df (pd.DataFrame): DataFrame carregado.

    Retorno:
        dict: Dicion√°rio com porcentagens de churn.
    """
    if df is not None and "Churn" in df.columns:
        distribuicao = df["Churn"].value_counts(normalize=True) * 100
        churn_yes = distribuicao.get("Yes", 0)
        churn_no = distribuicao.get("No", 0)

        print("\nüìà Taxa de Churn:")
        print(f"- Clientes que cancelaram (Yes): {churn_yes:.2f}%")
        print(f"- Clientes que n√£o cancelaram (No): {churn_no:.2f}%")

        return {"Yes": churn_yes, "No": churn_no}
    else:
        print("‚ö†Ô∏è Coluna 'Churn' n√£o encontrada no dataset.")
        return {}


if __name__ == "__main__":
    # Caminho do dataset
    caminho_arquivo = "churn_data.csv"

    # Carregar o dataset
    dataset = carregar_dataset(caminho_arquivo)

    # Visualizar primeiras linhas
    visualizar_primeiras_linhas(dataset)

    # Calcular taxa de churn
    calcular_taxa_churn(dataset)